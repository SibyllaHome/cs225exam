Exam #1 score (rduenas2): 6/6

=== Grade Feedback for Problem "exam1_createSmallClass_cube" ===
[1/1]: Test: default constructor
[1/1]: Test: one parameter constructor
[1/1]: Test: use of type double
=====
[3/3]

--- stdout ---
g++ -g -O0 -Wall -Wextra main.cpp cube.cpp -o cube-tester
Testing default constructor...
+ PASS : (new cube())->getVolume == 1

Testing one parameter constructor...
+ PASS : (new cube(2))->getVolume == 8

Testing use of type double...
+ PASS : (new cube(2.5))->getVolume == 2.5 * 2.5 * 2.5



--- stderr ---


--- submitted file: cube.cpp ---
#include "cube.h"

//
// The cube class must:
//
// - Store a variable d (stored as a double), which represents the length of
//   one edge of the cube.
//
// - Have a default constructor that sets the length of the edge of the cube
//   to 1.0.
//
// - Have a second constructor that takes one parameter: the length of one
//   edge of the cube
//
// - Have a getVolume function that takes no parameters and returns the volume
//   of the cube (as a double):
//   - The volume of the cube can be calculated by: d * d * d
//
cube::cube(){
d=1.0;

}

cube::cube(double l){
d=l;

}

double cube::getVolume(){
return d*d*d;
}

--- submitted file: cube.h ---
#ifndef _CUBE_H
#define _CUBE_H
class cube{

public:

double d;

cube();
cube(double l);
double getVolume();


};
//
// The cube class must:
//
// - Store a variable d (stored as a double), which represents the length of
//   one edge of the cube.
//
// - Have a default constructor that sets the length of the edge of the cube
//   to 1.0.
//
// - Have a second constructor that takes one parameter: the length of one
//   edge of the cube
//
// - Have a getVolume function that takes no parameters and returns the volume
//   of the cube (as a double):
//   - The volume of the cube can be calculated by: d * d * d
//

#endif


=== Grade Feedback for Problem "exam1_mp1-like_xray" ===
[1/1]: Test: in_1.png
[1/1]: Test: in_2.png
[1/1]: Test: in_3.png
=====
[3/3]

--- stdout ---
g++ -std=c++1y -c -g -O0 -Wall -Wextra -pedantic main.cpp
g++ -std=c++1y -c -g -O0 -Wall -Wextra -pedantic png.cpp
g++ -std=c++1y -c -g -O0 -Wall -Wextra -pedantic rgbapixel.cpp
g++ main.o png.o rgbapixel.o -std=c++1y -lpng -lpthread -o main


--- stderr ---


--- submitted file: main.cpp ---
#include <algorithm>
#include <iostream>

#include "rgbapixel.h"
#include "png.h"

using namespace std;

PNG transform_xray(PNG original) {
	//
	// To "X-Ray" an image, you must:
	// - Invert every color component (red, green, and blue) of every pixel.
	// - To invert the color component: subtract the value of the color
	//   component from 255.  For example:
	//   * An original value of 100 has an inverted value of 155
	//     (since 255 - 100 = 155).
	//   * An original value of 210 has an inverted value of 45
	//     (since 255 - 210 = 45).
	//   * An original value of 55 has an inverted value of 200
	//     (since 255 - 55 = 200).
	//   * etc..
	//
for(size_t i=0;i<original.width();i++)
{
	for(size_t j=0;j<original.height();j++)
	{
		original(i,j)->red=255-original(i,j)->red;
		original(i,j)->green=255-original(i,j)->green;
		original(i,j)->blue=255-original(i,j)->blue;
	}

}
return original;

}

int main() {
	PNG image("in.png");
	image = transform_xray(image);
	image.writeToFile("out.png");
	return 0;
}


